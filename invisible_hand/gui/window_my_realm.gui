######################################################
##################### MY REALM #######################
######################################################

window = {
	name = "my_realm_window"
	datacontext = "[GetVariableSystem]"
	datacontext = "[GetPlayer]"
	parentanchor = top|right
	allow_outside = yes
	movable = no
	layer = windows_layer

	using = Window_Size_MainTab

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
		using = Window_Position_MainTab

		on_start = "[GetVariableSystem.Set( 'right_window_open', 'true' )]"
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
		using = Window_Position_MainTab_Hide

		on_start = "[GetVariableSystem.Clear( 'right_window_open' )]"
		on_finish = "[GetVariableSystem.Clear( 'liege_tab' )]"
	}

	state = {
		name = dismiss
		next = _hide

		trigger_when = "[GetVariableSystem.Exists( 'hide_right_windows' )]"
	}

	margin_widget = {
		size = { 100% 100% }
		margin = { 0 26 }
		margin_left = 10
		margin_right = 10

		using = Window_Background

		widget = {
			size = { 100% 100% }

			# using = Window_Decoration_Thin

			### WINDOW CONTENT
			vbox = {
				using = Window_Margins

				##### HEADER NO LIEGE TEXT #####
				header_with_picture = {
					layoutpolicy_horizontal = expanding
					minimumsize = { 0 170 }

					blockoverride "header_text" {
						text = "[GetPlayer.GetPrimaryTitle.GetNameNoTooltip|U]"
					}

					blockoverride "size" {
						size = { 100% 190 }
					}

					blockoverride "illustration_texture" {
						texture = "gfx/interface/illustrations/window_headers/header_my_realm.dds"
					}

					blockoverride "button_close"
					{
						onclick = "[MyRealmWindow.Close]"
					}

					vbox = {
						margin_top = 42
						margin_bottom = 6
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						hbox = {
							spacing = 20
							margin_top = -4

							text_single = {
								name = "realm_type"
								text = "MY_REALM_WINDOW_TYPE"
							}

							text_single = {
								text = "REALM_WINDOW_SIZE"
								#	tooltip = "REALM_WINDOW_SIZE_TT"
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							hbox = {
								name = "crown_authority"
								datamodel = "[MyRealmWindow.GetRealmLaws]"
								ignoreinvisible = yes

								item = {
									vbox = {
										datacontext = "[GuiLawGroup.GetLawGroup]"
										visible = "[And( GuiLawGroup.GetLawGroup.HasFlag( 'crown_authority_law' ), GuiLawGroup.IsAvailable )]"
										ignoreinvisible = yes

										hbox = {
											margin_top = 4
											datamodel = "[GuiLawGroup.GetLaws]"

											item = {
												icon_button_decorative = {
													scale = 0.95
													datacontext = "[GuiLaw.GetLaw]"
													size = { 60 60 }
													enabled = "[GuiLaw.IsEnacted]"
													down = "[GuiLaw.IsEnacted]"
													alwaystransparent = "[GuiLaw.IsEnacted]"
													tooltipwidget = { pass_law_tooltip_alt = {} }
													using = tooltip_below

													icon_button_decorative = {
														size = { 54 54 }
														parentanchor = center
														alwaystransparent = yes
													}

													button_icon = {
														visible = "[Not(GuiLaw.IsEnacted)]"
														texture = "[Law.GetIcon]"
														parentanchor = center
														size = { 42 42 }
														alwaystransparent = yes
													}

													icon = {
														visible = "[And( GuiLaw.IsEnacted , Not( GuiLaw.CanEnact ) )]"
														texture = "[Law.GetIcon]"
														parentanchor = center
														size = { 42 42 }
														alwaystransparent = yes

														using = Master_Button_Modify_Texture

														blockoverride "master_color_frame" {
															frame = 2
														}
													}
												}
											}
										}
										
										hbox = {
											spacing = 4

											text_single = {
												text = "CROWN_AUTHORITY_HEADER_LABEL"
											}

											text_single = {
												text = "CROWN_AUTHORITY_HEADER_SCORE_LABEL"
											}
										}
									}
								}
							}
						}
					}

					widget = {
						layoutpolicy_vertical = growing
						allow_outside = yes
						size = { 89 98 }

						coa_realm_big_crown = {
							parentanchor = top|hcenter
							position = { 30 5 }
						}
					}
				}

				# Tabs Buttons
				hbox = {
					name = "vassals_succession_tabs"
					layoutpolicy_horizontal = expanding

					button_tab = {
						name = "tutorial_highlight_domain_tab"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						onclick = "[MyRealmWindow.ShowDomain]"
						onclick = "[GetVariableSystem.Clear( 'liege_tab' )]"
						onclick = "[GetVariableSystem.Clear( 'laws_tab' )]"
						down = "[And(MyRealmWindow.IsShowingDomain,Not(Or(GetVariableSystem.Exists( 'liege_tab' ),GetVariableSystem.Exists( 'laws_tab' ))))]"

						text = "MY_REALM_WINDOW_DOMAIN_TAB"
					}

					button_tab = {
						visible = "[GreaterThan_int32( MyRealmWindow.GetVassalCount, '(int32)0' )]"
						name = "tutorial_highlight_vassals_tab"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						onclick = "[MyRealmWindow.ShowVassals]"
						onclick = "[GetVariableSystem.Clear( 'liege_tab' )]"
						onclick = "[GetVariableSystem.Clear( 'laws_tab' )]"
						down = "[And(MyRealmWindow.IsShowingVassals,Not(Or(GetVariableSystem.Exists( 'liege_tab' ),GetVariableSystem.Exists( 'laws_tab' ))))]"

						text = "MY_REALM_WINDOW_VASSALS_TAB"
					}

					button_tab = {
						visible = "[GetPlayer.HasLiege]"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						onclick = "[GetVariableSystem.Set( 'liege_tab', 'true' )]"
						onclick = "[GetVariableSystem.Clear( 'laws_tab' )]"
						down = "[GetVariableSystem.Exists( 'liege_tab' )]"

						text = "MY_REALM_WINDOW_LIEGE_TAB"
					}

					button_tab = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						onclick = "[GetVariableSystem.Set( 'laws_tab', 'true' )]"
						onclick = "[GetVariableSystem.Clear( 'liege_tab' )]"
						down = "[GetVariableSystem.Exists( 'laws_tab' )]"

						text = "MY_REALM_WINDOW_LAWS_TAB"
					}

					button_tab = {
						name = "tutorial_highlight_succession_tab"
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						onclick = "[MyRealmWindow.ShowSuccession]"
						onclick = "[GetVariableSystem.Clear( 'liege_tab' )]"
						onclick = "[GetVariableSystem.Clear( 'laws_tab' )]"
						down = "[And(MyRealmWindow.IsShowingSuccession,Not(Or(GetVariableSystem.Exists( 'liege_tab' ),GetVariableSystem.Exists( 'laws_tab' ))))]"

						text = "MY_REALM_WINDOW_SUCCESSION_TAB"
					}
				}

				### DOMAIN TAB
				vbox = {
					name = "tab_domain"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[And(MyRealmWindow.IsShowingDomain,Not(Or(GetVariableSystem.Exists( 'liege_tab' ),GetVariableSystem.Exists( 'laws_tab' ))))]"

					using = Animation_Tab_Switch

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content" {
							vbox = {
								datamodel = "[MyRealmWindow.GetDomainItems]"
								layoutpolicy_horizontal = expanding
								spacing = 6

								item = {
									vbox = {
										layoutpolicy_horizontal = expanding
										name = "duchy_group"

										hbox = {
											layoutpolicy_horizontal = expanding
											margin_bottom = 4

											background = {
												using = Background_Area_Light
											}

											hbox = {
												spacing = 10

												coa_title_tiny_crown = {
													datacontext = "[DuchyGroup.GetDuchy]"
													using = tooltip_ws
												}

												text_single = {
													text = "[DuchyGroup.GetDuchy.GetNameNoTooltip]"
													using = Font_Size_Medium
												}
											}
										}

										vbox = {
											margin_top = 3
											name = "county_group"
											datamodel = "[DuchyGroup.GetCounties]"
											layoutpolicy_horizontal = expanding
											spacing = 20

											item = {
												vbox = {
													layoutpolicy_horizontal = expanding
													spacing = 5
													datacontext = "[CountyGroup.GetCounty]"
													datacontext = "[CountyGroup.GetCapitalProvince.GetCounty]"

													hbox = {
														layoutpolicy_horizontal = expanding
														spacing = 7

														background = {
															using = Background_Area
															margin_right = 3
															margin_left = 3
														}

														hbox = {
															spacing = 2

															hbox = {
																minimumsize = { 38 0 }
																maximumsize = { 38 400 }

																coa_title_tiny = {}
															}

															hbox = {
																minimumsize = { 124 0 }
																maximumsize = { 124 400 }
																margin_top = -4

																text_single = {
																	layoutpolicy_horizontal = expanding
																	text = "[Title.GetNameNoTooltip]"
																	autoresize = yes
																}
															}
														}

														expand = { }

														hbox = {
															margin_left = -12
															minimumsize = { 130 0 }
															maximumsize = { 130 400 }
															allow_outside = yes

															hbox = {
																allow_outside = yes
																margin_top = -4
																spacing = 4
																margin_right = 6

																hbox = {
																	allow_outside = yes
																	margin_bottom = -6

																	icon = {
																		size = { 20 20 }
																		texture = "gfx/interface/icons/icon_opinion.dds"
																		tooltip = "MRW_COUNTY_OPINION_TOOLTIP"
																	}
																}

																text_single = {
																	name = "opinion"
																	text = "[Title.Custom('CountyOpinion')|0V]"
																}
															}

															hbox = {
																allow_outside = yes
																margin_top = -4
																spacing = 4
																margin_right = 6

																hbox = {
																	margin_bottom = -6

																	icon = {
																		size = { 22 22 }
																		texture = "gfx/interface/icons/council_task_types/task_develop_county.dds"
																		tooltip = "MRW_COUNTY_DEVELOPMENT_TOOLTIP"
																	}
																}

																text_single = {
																	name = "development"
																	text = "[County.GetDevelopmentLevel]"
																	default_format = "#high"
																	tooltip = "COUNTY_DEVELOPMENT_TOOLTIP"
																}
															}

															hbox = {
																allow_outside = yes
																margin_top = -4
																spacing = 4

																hbox = {
																	margin_bottom = -6

																	icon = {
																		size = { 22 22 }
																		texture = "gfx/interface/icons/council_task_types/task_increase_control.dds"
																		tooltip = "MRW_COUNTY_CONTROL_TOOLTIP"
																	}
																}

																text_single = {
																	margin_right = 10
																	name = "tutorial_highlight_control"
																	text = "[County.GetControlLevel]"
																	default_format = "#high"
																	tooltip = "MY_REALM_WINDOW_CONTROL_TOOLTIP"
																}
															}
														}

														expand = { }

														vbox = {
															minimumsize = { 140 0 }
															maximumsize = { 140 400 }
															margin_right = 6
															margin_bottom = 1

															hbox = {
																datacontext = "[County.GetCulture]"
																layoutpolicy_horizontal = expanding
																spacing = 2

																using = tooltip_ne

																tooltipwidget = {

																	culture_tooltip = {

																		blockoverride "extra_info"
																		{
																			text_single = {
																				fonttintcolor = "[TooltipInfo.GetTintColor]"
																				using = DefaultTooltipText
																				visible = "[Not( ObjectsEqual( Culture.Self, GetPlayer.GetCulture ) )]"
																				text = "COUNTY_NOT_YOUR_CULTURE"
																			}
																		}
																	}
																}

																text_single = {
																	layoutpolicy_horizontal = expanding
																	text = "[culture|E]:"
																}

																button_group = {
																	# shortcut = "innovations_window"
																	onclick = "[DefaultOnCultureClick(Culture.GetID)]"

																	text_single = {
																		text = "CULTURE_COUNTY_WINDOW"
																		default_format = "#high"

																		background = {
																			visible = "[NotEqualTo_uint32(Culture.GetID, GetPlayer.GetCulture.GetID)]"
																			margin = { 5 0 }
																			using = Status_Bad
																		}
																	}
																}
															}

															hbox = {
																margin_top = -2
																margin_bottom = 4
																datacontext = "[County.GetFaith]"
																layoutpolicy_horizontal = expanding
																spacing = 2
																using = tooltip_ne

																tooltipwidget = {

																	faith_tooltip = {

																		blockoverride "extra_info" {
																			using = faith_tooltip_click_default_extra_info

																			text_single = {
																				margin = { 10 0 }
																				layoutpolicy_horizontal = expanding
																				fonttintcolor = "[TooltipInfo.GetTintColor]"
																				using = DefaultTooltipText
																				visible = "[Not( ObjectsEqual( Faith.Self, GetPlayer.GetFaith ) )]"
																				text = "COUNTY_NOT_YOUR_FAITH"
																			}
																		}
																	}
																}

																text_single = {
																	layoutpolicy_horizontal = expanding
																	text = "[faith|E]:"
																}

																button_group = {
																	# shortcut = "faith_window"
																	onclick = "[DefaultOnFaithClick(Faith.GetID)]"

																	text_single = {
																		text = "[Faith.GetNameNoTooltip]"
																		default_format = "#high"

																		background = {
																			visible = "[NotEqualTo_uint32(Faith.GetID, GetPlayer.GetFaith.GetID)]"
																			margin = { 5 0 }
																			using = Status_Bad
																		}
																	}
																}
															}
														}
													}

													vbox = {
														datamodel = "[CountyGroup.GetHoldings]"
														layoutpolicy_horizontal = expanding
														spacing = 3

														item = {
															vbox = {
																layoutpolicy_horizontal = expanding
																datacontext = "[HoldingItem.GetHolding]"
																margin_bottom = 24

																button_standard = {
																	layoutpolicy_horizontal = expanding
																	minimumsize = { 0 45 }

																	onclick = "[HoldingItem.OnClick]"
																	down = "[Holding.IsSelected]"

																	using = Holding_Mouse_Entry

																	widget = {
																		scissor = yes
																		size = { 150 43 }
																		parentanchor = right|top

																		icon = {
																			parentanchor = right|top
																			size = { 104 43 }
																			mirror = horizontal
																			texture = "[HoldingItem.GetHolding.GetIllustration]"
																			alpha = 0.8

																			using = Mask_Rough_Edges

																			modify_texture = {
																				texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
																				blend_mode = alphamultiply
																			}
																		}
																	}

																	vbox = {
																		layoutpolicy_horizontal = expanding

																		hbox = {
																			name = "holding_header"
																			margin_bottom = 4
																			layoutpolicy_horizontal = expanding
																			margin_left = -28
																			spacing = 6
						
																			hbox = {
																				margin_top = 2
																				margin_right = -99
																				allow_outside = yes
																				icon = {
																					datacontext = "[HoldingItem.GetHolding.GetProvince.GetTerrain]"
																					texture = "[Terrain.GetIcon]"
																					size = { 22 22 }
																					tooltip = "HOLDING_TERRAIN_TOOLTIP"
																					alpha = 0.8
																				}
																			}

																			expand = {}

																			hbox = {
																				allow_outside = yes
																				min_width = 25
																				margin_bottom = 2
																				margin_left = -12

																				icon = {
																					name = "realm_capital_icon"
																					visible = "[HoldingItem.IsRealmCapital]"
																					size = { 25 25 }
																					framesize = { 63 63 }
																					texture = "gfx/interface/icons/icon_capital.dds"
																					frame = 2
																					tooltip = "REALM_CAPITAL_TOOLTIP"
																				}
																			}

																			hbox = {
																				allow_outside = yes
																				margin_top = -2
																				margin_left = -10

																				text_single = {
																					text = "MY_REALM_WINDOW_HOLDING_NAME"
																				}
																			}

																			expand = {}
																		}
																	}
																}

																spacer = {
																	size = { 0 4 }
																}

																hbox = {
																	spacing = 20

																	hbox = {
																		spacing = 7

																		icon = {
																			texture = "gfx/interface/window_siege/fort_icon.dds"
																			tooltip = "MRW_FORT_LEVEL_TOOLTIP"
																			size = { 25 20 }
																		}

																		text_single = {
																			tooltip = "[Title.GetProvince.GetFortLevelTooltip]"
																			text = "[Title.GetProvince.GetFortLevel]"
																			default_format = "#high"
																			align = nobaseline
																		}
																	}

																	hbox = {
																		spacing = 2

																		icon = {
																			texture = "gfx/interface/icons/icon_garrison.dds"
																			tooltip = "MRW_GARRISON_TOOLTIP"
																			size = { 28 28 }
																		}

																		text_single = {
																			text = "[HoldingItem.GetHolding.GetGarrisonSize]"
																			#tooltip = "[HoldingItem.GetHolding.GetGarrisonTooltip]"
																			default_format = "#high"
																			align = nobaseline
																		}
																	}

																	hbox = {
																		spacing = 3

																		icon = {
																			texture = "gfx/interface/icons/stress/icon_stress_level.dds"
																			tooltip = "MRW_POPULATION_TOOLTIP"
																			frame = 1
																			framesize = { 70 70 }
																			size = { 22 22 }
																		}


																		hbox = {
																			allow_outside = yes
																			margin_top = -5

																			text_single = {
																				text = "[Title.GetProvince.Custom('ProvincePopulation')|v]"
																				default_format = "#high"
																				tooltip = "POPULATION_VALUE_PROVINCE_TOOLTIP"
																			}
																		}
																	}

																	hbox = {
																		spacing = 4

																		icon = {
																			texture = "gfx/interface/icons/icon_supplies.dds"
																			tooltip = "MRW_SUPPLY_LIMIT_TOOLTIP"
																			frame = 3
																			framesize = { 60 60 }
																			size = { 24 24 }
																		}


																		hbox = {
																			allow_outside = yes
																			margin_top = -5

																			text_single = {
																				text = "[Title.GetProvince.GetSupplyLimitFor( GetPlayer )|V]"
																				default_format = "#high"
																				tooltip = "HOLDING_TT_SUPPLY_TT_ALT"
																			}
																		}
																	}
																}

																spacer = {
																	size = { 0 4 }
																}

																divider = {
																	layoutpolicy_horizontal = growing
																}

																vbox = {
																	margin_top = 5
																	margin_bottom = 16

																	text_single = {
																		text = "PROVINCE_TAX_LEVEL_LABEL"
																	}

																	hbox = {
																		margin_top = 10
																		spacing = 10

																		vbox = {
																			button_standard_clean = {
																				size = { 80 32 }
																				datacontext = "[GetScriptedGui( 'invisible_hand_tax_level_1' )]"
																				enabled = "[Or(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ),EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceTaxLevel'), '1')) ]"
																				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				down = "[EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceTaxLevel'), '1')]"
																				tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				
																				background = {
																					using = Background_Area
																					alpha = 0.6
																				}

																				text_multi = {
																					margin_top = -6
																					text = "TAX_LEVEL_VERY_LOW_LABEL"
																					size = { 100% 100% }
																					align = center
																					default_format = "#high"
																				}
																			}
																		}

																		vbox = {
																			button_standard_clean = {
																				size = { 80 32 }
																				datacontext = "[GetScriptedGui( 'invisible_hand_tax_level_2' )]"
																				enabled = "[Or(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ),EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceTaxLevel'), '2')) ]"
																				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				down = "[EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceTaxLevel'), '2')]"
																				tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				
																				background = {
																					using = Background_Area
																					alpha = 0.6
																				}

																				text_multi = {
																					margin_top = -6
																					text = "TAX_LEVEL_LOW_LABEL"
																					size = { 100% 100% }
																					align = center
																					default_format = "#high"
																				}
																			}
																		}

																		vbox = {
																			button_standard_clean = {
																				size = { 80 32 }
																				datacontext = "[GetScriptedGui( 'invisible_hand_tax_level_3' )]"
																				enabled = "[Or(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ),EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceTaxLevel'), '3')) ]"
																				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				down = "[EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceTaxLevel'), '3')]"
																				tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				
																				background = {
																					using = Background_Area
																					alpha = 0.6
																				}

																				text_multi = {
																					margin_top = -6
																					text = "TAX_LEVEL_NORMAL_LABEL"
																					size = { 100% 100% }
																					align = center
																					default_format = "#high"
																				}
																			}
																		}

																		vbox = {
																			button_standard_clean = {
																				size = { 80 32 }
																				datacontext = "[GetScriptedGui( 'invisible_hand_tax_level_4' )]"
																				enabled = "[Or(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ),EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceTaxLevel'), '4')) ]"
																				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				down = "[EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceTaxLevel'), '4')]"
																				tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				
																				background = {
																					using = Background_Area
																					alpha = 0.6
																				}

																				text_multi = {
																					margin_top = -6
																					text = "TAX_LEVEL_HIGH_LABEL"
																					size = { 100% 100% }
																					align = center
																					default_format = "#high"
																				}
																			}
																		}

																		vbox = {
																			button_standard_clean = {
																				size = { 80 32 }
																				datacontext = "[GetScriptedGui( 'invisible_hand_tax_level_5' )]"
																				enabled = "[Or(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ),EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceTaxLevel'), '5')) ]"
																				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				down = "[EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceTaxLevel'), '5')]"
																				tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				
																				background = {
																					using = Background_Area
																					alpha = 0.6
																				}

																				text_multi = {
																					margin_top = -6
																					text = "TAX_LEVEL_VERY_HIGH_LABEL"
																					size = { 100% 100% }
																					align = center
																					default_format = "#high"
																				}
																			}
																		}
																	}

																	text_single = {
																		margin_top = 2
																		text = "PROVINCE_TAX_INCOME"
																		tooltip = "[Holding.GetTaxTooltip]"
																	}
																}

																divider = {
																	layoutpolicy_horizontal = growing
																}

																vbox = {
																	margin_top = 4
																	margin_bottom = 16

																	text_single = {
																		text = "PROVINCE_LEVY_LEVEL_LABEL"
																	}

																	hbox = {
																		margin_top = 10
																		spacing = 10

																		vbox = {
																			button_standard_clean = {
																				size = { 80 32 }
																				datacontext = "[GetScriptedGui( 'invisible_hand_levy_level_1' )]"
																				enabled = "[Or(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ),EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceLevyLevel'), '1')) ]"
																				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				down = "[EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceLevyLevel'), '1')]"
																				tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				
																				background = {
																					using = Background_Area
																					alpha = 0.6
																				}

																				text_multi = {
																					margin_top = -6
																					text = "LEVY_LEVEL_VERY_LOW_LABEL"
																					size = { 100% 100% }
																					align = center
																					default_format = "#high"
																				}
																			}
																		}

																		vbox = {
																			button_standard_clean = {
																				size = { 80 32 }
																				datacontext = "[GetScriptedGui( 'invisible_hand_levy_level_2' )]"
																				enabled = "[Or(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ),EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceLevyLevel'), '2')) ]"
																				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				down = "[EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceLevyLevel'), '2')]"
																				tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				
																				background = {
																					using = Background_Area
																					alpha = 0.6
																				}

																				text_multi = {
																					margin_top = -6
																					text = "LEVY_LEVEL_LOW_LABEL"
																					size = { 100% 100% }
																					align = center
																					default_format = "#high"
																				}
																			}
																		}

																		vbox = {
																			button_standard_clean = {
																				size = { 80 32 }
																				datacontext = "[GetScriptedGui( 'invisible_hand_levy_level_3' )]"
																				enabled = "[Or(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ),EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceLevyLevel'), '3')) ]"
																				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				down = "[EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceLevyLevel'), '3')]"
																				tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				
																				background = {
																					using = Background_Area
																					alpha = 0.6
																				}

																				text_multi = {
																					margin_top = -6
																					text = "LEVY_LEVEL_NORMAL_LABEL"
																					size = { 100% 100% }
																					align = center
																					default_format = "#high"
																				}
																			}
																		}

																		vbox = {
																			button_standard_clean = {
																				size = { 80 32 }
																				datacontext = "[GetScriptedGui( 'invisible_hand_levy_level_4' )]"
																				enabled = "[Or(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ),EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceLevyLevel'), '4')) ]"
																				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				down = "[EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceLevyLevel'), '4')]"
																				tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				
																				background = {
																					using = Background_Area
																					alpha = 0.6
																				}

																				text_multi = {
																					margin_top = -6
																					text = "LEVY_LEVEL_HIGH_LABEL"
																					size = { 100% 100% }
																					align = center
																					default_format = "#high"
																				}
																			}
																		}

																		vbox = {
																			button_standard_clean = {
																				size = { 80 32 }
																				datacontext = "[GetScriptedGui( 'invisible_hand_levy_level_5' )]"
																				enabled = "[Or(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ),EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceLevyLevel'), '5')) ]"
																				onclick = "[ScriptedGui.Execute( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"
																				down = "[EqualTo_string(HoldingItem.GetHolding.GetProvince.Custom('ProvinceLevyLevel'), '5')]"
																				tooltip = "[ScriptedGui.BuildTooltip( GuiScope.SetRoot( GetPlayer.MakeScope ).AddScope( 'province', HoldingItem.GetHolding.GetProvince.MakeScope ).End ) ]"

																				background = {
																					using = Background_Area
																					alpha = 0.6
																				}

																				text_multi = {
																					margin_top = -6
																					text = "LEVY_LEVEL_VERY_HIGH_LABEL"
																					size = { 100% 100% }
																					align = center
																					default_format = "#high"
																				}
																			}
																		}
																	}

																	text_single = {
																		margin_top = 2
																		text = "PROVINCE_TOTAL_LEVIES"
																		tooltip = "[Holding.GetLeviesTooltip]"
																	}
																}

																divider = {
																	layoutpolicy_horizontal = growing
																}
															}
														}
													}
													
													vbox = {
														layoutpolicy_horizontal = expanding
														visible = "[DataModelHasItems(CountyGroup.GetEmptyHoldings)]"
														spacing = 5
														margin_top = -20
														allow_outside = yes

														hbox = {
															layoutpolicy_horizontal = expanding

															expand = {}

															button_group = {
																onclick = "[CountyGroup.ToggleExpanded]"

																flowcontainer = {
																	spacing = 5

																	widget = {
																		size = { 18 22 }

																		button_expand = {
																			down = "[CountyGroup.IsExpanded]"
																			parentanchor = center
																		}
																	}

																	flowcontainer = {
																		margin_top = 1

																		text_single = {
																			text = "ME_REALM_WINDOW_EMPTY_HOLDINGS"
																			default_format = "#low"
																			align = nobaseline
																		}
																	}
																}
															}

															expand = {}
														}

														expand = {}

														vbox = {
															datamodel = "[CountyGroup.GetEmptyHoldings]"
															visible = "[CountyGroup.IsExpanded]"
															layoutpolicy_horizontal = expanding
															spacing = 12

															item = {
																vbox = {
																	layoutpolicy_horizontal = expanding
																	datacontext = "[HoldingItem.GetHolding]"

																	button_standard = {
																		datacontext = "[HoldingItem.GetHolding]"
																		onclick = "[HoldingItem.OnClick]"
																		down = "[Holding.IsSelected]"

																		using = Holding_Mouse_Entry

																		layoutpolicy_horizontal = expanding
																		layoutpolicy_vertical = expanding
																		minimumsize = { 0 45 }

																		widget = {
																			scissor = yes
																			size = { 150 43 }
																			parentanchor = right|top

																			icon = {
																				name = "illustration"
																				parentanchor = right|top
																				size = { 104 75 }
																				mirror = horizontal
																				texture = "[HoldingItem.GetHolding.GetProvince.GetTerrain.GetIllustration]"
																				alpha = 0.7

																				using = Mask_Rough_Edges

																				modify_texture = {
																					texture = "gfx/interface/component_masks/mask_fade_horizontal_extended.dds"
																					blend_mode = alphamultiply
																				}
																			}
																		}

																		hbox = {
																			layoutpolicy_horizontal = expanding
																			layoutpolicy_vertical = expanding
						
																			hbox = {
																				margin_right = -41
																				allow_outside = yes
																				icon = {
																					datacontext = "[HoldingItem.GetHolding.GetProvince.GetTerrain]"
																					texture = "[Terrain.GetIcon]"
																					size = { 22 22 }
																					tooltip = "HOLDING_TERRAIN_TOOLTIP"
																					alpha = 0.8
																				}
																			}

																			expand = {}

																			vbox = {
																				visible = "[HoldingItem.GetHolding.CanConstructAnyBuilding(GetPlayer)]"
																				layoutpolicy_horizontal = expanding
																				layoutpolicy_vertical = expanding
																				margin_right = -10

																				text_multi = {
																					margin_bottom = -6
																					default_format = "#low"
																					autoresize = yes
																					text = "[HoldingItem.GetBarony.GetNameNoTierNoTooltip]"
																				}

																				hbox = {
																					layoutpolicy_horizontal = expanding
																					margin_top = -6

																					text_multi = {
																						text = "MY_REALM_WINDOW_CONSTRUCT_HOLDING"
																						default_format = "#P"
																						autoresize = yes
																					}
																				}
																			}

																			vbox = {
																				visible = "[HoldingItem.GetHolding.IsConstructionInProgress]"
																				layoutpolicy_horizontal = expanding
																				layoutpolicy_vertical = expanding
																				margin_top = 4
																				margin_right = -10

																				text_multi = {
																					margin_bottom = -6
																					default_format = "#low"
																					autoresize = yes
																					text = "[HoldingItem.GetBarony.GetNameNoTierNoTooltip]"
																				}

																				hbox = {
																					layoutpolicy_vertical = expanding
																					margin_top = -4

																					text_multi = {
																						layoutpolicy_horizontal = expanding
																						text = "[HoldingItem.GetStatusText]"
																						autoresize = yes
																					}
																				}
																			}

																			vbox = {
																				visible = "[Not(Or(HoldingItem.GetHolding.CanConstructAnyBuilding(GetPlayer),HoldingItem.GetHolding.IsConstructionInProgress))]"
																				layoutpolicy_horizontal = expanding
																				layoutpolicy_vertical = expanding
																				margin_right = -10

																				text_multi = {
																					default_format = "#low"
																					autoresize = yes
																					text = "[HoldingItem.GetBarony.GetNameNoTierNoTooltip]"
																				}
																			}

																			expand = {}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}

				### VASSALS TAB
				vbox = {
					name = "tab_vassals"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[And(MyRealmWindow.IsShowingVassals,Not(Or(GetVariableSystem.Exists( 'liege_tab' ),GetVariableSystem.Exists( 'laws_tab' ))))]"

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					hbox = {
						name = "government_filters_container"
						margin = { 0 7 }

						hbox = {
							name = "government_filters"
							datamodel = "[MyRealmWindow.GetGovernmentTypeHeaders]"
							visible = "[LessThan_int32(GetDataModelSize(MyRealmWindow.GetGovernmentTypeHeaders), '(int32)3')]"
							spacing = 5
							layoutpolicy_horizontal = expanding

							button_standard_clean = {
								name = "all_governments"
								size = { 60 33 }
								default_format = "#low"

								text = "MRW_GOVERNMENT_FILTER_ALL"
								tooltip = "MRW_GOVERNMENT_FILTER_ALL_TT"
								using = tooltip_above
								down = "[Not(MyRealmWindow.HasGovernmentTypeFilter)]"
								onclick = "[MyRealmWindow.ResetGovernmentTypeFilter]"
							}

							item = {
								button_standard_clean = {
									name = "government_filter"
									datacontext = "[GovernmentTypeHeader.GetGovernmentType]"

									text = "MRW_GOVERNMENT_FILTER"
									default_format = "#low"

									tooltip = "MRW_GOVERNMENT_FILTER_TT"
									using = tooltip_above
									down = "[GovernmentTypeHeader.IsSelected]"
									onclick = "[GovernmentTypeHeader.OnClick]"
								}
							}
						}

						hbox = {
							name = "small_government_filters"
							datamodel = "[MyRealmWindow.GetGovernmentTypeHeaders]"
							visible = "[GreaterThanOrEqualTo_int32(GetDataModelSize(MyRealmWindow.GetGovernmentTypeHeaders), '(int32)3')]"
							spacing = 5
							layoutpolicy_horizontal = expanding

							button_standard_clean = {
								name = "all_governments"
								size = { 60 33 }
								default_format = "#low"

								text = "MRW_GOVERNMENT_FILTER_ALL"
								tooltip = "MRW_GOVERNMENT_FILTER_ALL_TT"
								using = tooltip_above
								down = "[Not(MyRealmWindow.HasGovernmentTypeFilter)]"
								onclick = "[MyRealmWindow.ResetGovernmentTypeFilter]"
							}

							item = {
								button_standard_clean = {
									name = "small_government_filter"
									datacontext = "[GovernmentTypeHeader.GetGovernmentType]"
									size = { 90 33 }

									text = "[GovernmentType.GetNameNoTooltip]"
									default_format = "#low"

									tooltip = "MRW_GOVERNMENT_FILTER_TT"
									using = tooltip_above
									down = "[GovernmentTypeHeader.IsSelected]"
									onclick = "[GovernmentTypeHeader.OnClick]"
								}
							}
						}
					}

					text_single = {
						visible = "[MyRealmWindow.HasGovernmentTypeFilter]"
						margin_top = 5
						margin_bottom = 10

						text = "[MyRealmWindow.GetGovernmentTypeFilter.GetVassalsLabel]"
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_margins" {
							margin = { 5 5 }
						}

						blockoverride "scrollbox_content"
						{
							visible = "[GreaterThan_int32( MyRealmWindow.GetVassalCount, '(int32)0' )]"

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[MyRealmWindow.GetPowerfulVassals]"
								datamodel = "[CharacterSelectionList.GetList]"
								visible = "[Not(CharacterSelectionList.IsBuildingList)]"
								addcolumn = 545
								addrow = 185
								setitemsizefromcell = yes

								item = {
									widget_vassal_list_item = {
										datacontext = "[CharacterListItem.GetCharacter]"
										datacontext = "[MyRealmWindow.GetVassalInfo( Character.Self )]"
										datacontext = "[MyRealmWindowVassalItem.GetContract]"

										blockoverride "vassal_portrait"
										{
											portrait_shoulders = {}
										}
									}
								}
							}

							fixedgridbox = {
								layoutpolicy_horizontal = expanding
								datacontext = "[MyRealmWindow.GetRegularVassals]"
								datamodel = "[CharacterSelectionList.GetList]"
								visible = "[Not(CharacterSelectionList.IsBuildingList)]"
								addcolumn = 545
								addrow = 185
								setitemsizefromcell = yes

								item = {
									widget_vassal_list_item = {
										datacontext = "[CharacterListItem.GetCharacter]"
										datacontext = "[MyRealmWindow.GetVassalInfo( Character.Self )]"
										datacontext = "[MyRealmWindowVassalItem.GetContract]"
									}
								}
							}
							expand = {}
						}

						vbox = {
							visible = "[EqualTo_int32( MyRealmWindow.GetVassalCount, '(int32)0' )]"
							text_single = {
								text = "NO_VASSALS_TO_DISPLAY"
							}
						}
					}
				}

				### LIEGE TAB
				vbox = {
					name = "tab_liege"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					visible = "[GetVariableSystem.Exists( 'liege_tab' )]"

					using = Animation_Tab_Switch

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding

						blockoverride "scrollbox_content" {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							datacontext = "[MyRealmWindow.GetCharacter.GetLiege]"
							datacontext = "[MyRealmWindow.GetCharacter.GetVassalContract]"

							vbox = {
								margin_top = 4

								hbox = {
									margin_top = 6
									margin_bottom = 6

									text_label_center = {
										text = "MY_REALM_WINDOW_MY_LIEGE_ALT"
									}
								}

								hbox = {
									margin_top = 4
									spacing = 24

									portrait_head = { 
										blockoverride "coa" { }
										blockoverride "opinion_box" {

											text_single = {
												max_width = 45
												align = nobaseline
												margin = { 3 0 }
												tooltipwidget = liege_opinion_tooltip
												default_format = "#true_white"

												block "opinion_text" {
													text = "[GetPlayer.GetOpinionOf( GetPlayer.GetLiege )|=]"
													fonttintcolor = "[GetPlayer.GetOpinionOfTint( GetPlayer.GetLiege )]"
												}
											}
										}
									}

									hbox = {
										margin_top = -12

										coa_realm_big_crown = {	}
									}
								}

								hbox = {
									margin_top = 2

									text_single = {
										align = center
										layoutpolicy_horizontal = expanding
										text = "[Character.GetUINameNoTooltip]"
										autoresize = yes
									}
								}

								hbox = {
									visible = "[GetPlayer.IsPowerfulVassal]"
									spacing = 2
									margin_top = 5
									margin_left = -6
										
									hbox = {
										margin_bottom = -5

										icon = {
											visible = "[EqualTo_int32( GetPlayer.GetPowerfulVassalFrame, '(int32)1' )]"
											size = { 20 20 }
											texture = "gfx/interface/icons/portraits/powerful_vassal.dds"
											framesize = { 40 40 }
											frame = "1"
											tooltip = "POWERFUL_VASSAL_IN_COUNCIL"
										}

										icon = {
											visible = "[EqualTo_int32( GetPlayer.GetPowerfulVassalFrame, '(int32)2' )]"
											size = { 20 20 }
											texture = "gfx/interface/icons/portraits/powerful_vassal.dds"
											framesize = { 40 40 }
											frame = "2"
											tooltip = "POWERFUL_VASSAL_NOT_IN_COUNCIL"
										}

										icon = {
											visible = "[EqualTo_int32( GetPlayer.GetPowerfulVassalFrame, '(int32)3' )]"
											size = { 20 20 }
											texture = "gfx/interface/icons/portraits/powerful_vassal.dds"
											framesize = { 40 40 }
											frame = "3"
											tooltip = "POWERFUL_VASSAL_CHILL"
										}
									}


									text_single = {
										text = "MY_REALM_WINDOW_I_AM_POWERFUL_VASSAL"
									}
								}

								hbox = {
									datacontext = "[GetPlayer.GetVassalContract]"
									visible = "[Not( VassalContract.IsRightfulLiege)]"
									tooltip = "MRW_TT_NOT_RIGHTFUL_LIEGE_ALT"
									spacing = 2
									margin_top = 4

									hbox = {
										margin_bottom = -10
										
										icon = {
											name = "icon_non_dejure"
											size = { 30 30 }
											texture = "gfx/interface/icons/levy_tax_reduction.dds"
										}
									}

									text_single = {
										text = "MY_REALM_WINDOW_NOT_RIGHTFUL_LIEGE"
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									margin_left = -30
									margin_right = -30
									margin_top = 18
									margin_bottom = -6

									divider = {
										layoutpolicy_horizontal = expanding
									}
								}

								hbox = {
									margin_top = 18

									text_label_center = {
										text = "MRW_LIEGE_AUTHORITY_LABEL"
									}
								}
								hbox = {
									margin_top = 6
									margin_left = 10
									spacing = 4

									text_single = {
										text = "MRW_LIEGE_TAB_AUTHORITY_LABEL"
									}

									text_single = {
										text = "[Character.GetActiveLawInGroupWithFlag( 'crown_authority_law' ).GetName]"
									}

									hbox = {
										margin_bottom = -5
										margin_left = -2

										button_icon_highlight = {
											datacontext = "[Character.GetActiveLawInGroupWithFlag( 'crown_authority_law' )]"
											size = { 26 26 }
											texture = "[Law.GetIcon]"
											using = tooltip_ws
										}
									}
								}

								hbox = {
									spacing = 4
									margin_top = 5

									text_single = {
										text = "[invisible_hand_centralization|e]:"
									}

									text_single = {
										text = "[Character.GetActiveLawInGroupWithFlag( 'invisible_hand_centralization_law' ).GetName]"
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									margin_left = -30
									margin_right = -30
									margin_top = 18
									margin_bottom = -6

									divider = {
										layoutpolicy_horizontal = expanding
									}
								}

								hbox = {
									margin_top = 18
									margin_bottom = 2

									text_label_center = {
										text = "[liege] [invisible_hand_crown_laws]"
									}
								}

								hbox = {
									spacing = 12

									hbox = {
										spacing = 4
										margin_top = 5

										text_single = {
											text = "[title|e] [revocation|e]:"
										}

										text_single = {
											text = "[Character.GetActiveLawInGroupWithFlag( 'invisible_hand_title_revocation' ).GetName]"
										}
									}

									hbox = {
										spacing = 4
										margin_top = 5

										text_single = {
											text = "[vassal|e] [retraction|e]:"
										}

										text_single = {
											text = "[Character.GetActiveLawInGroupWithFlag( 'invisible_hand_vassal_retraction' ).GetName]"
										}
									}
								}

								hbox = {
									datacontext = "[GetScriptedGui( 'invisible_hand_realms_peace' )]"
									visible = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
									spacing = 4
									margin_top = 5

									text_single = {
										text = "MRW_REALMS_PEACE_LABEL_LIEGE"
									}

									text_single = {
										text = "[Character.GetActiveLawInGroupWithFlag( 'invisible_hand_realms_peace' ).GetName]"
									}
								}
							}

							vbox = {
								visible = "[Character.IsPlayerInteractionValid('vassal_modify_vassal_contract_interaction')]"
								layoutpolicy_horizontal = expanding

								background = {
									using = Background_Area_Border
									margin_top = -20
								}

								hbox = {
									margin_top = 32
									spacing = 3

									hbox = {
										margin_left = 10

										text_label_center = {
											text = "MY_REALM_WINDOW_MY_CONTRACT"
										}
									}

									hbox = {
										margin_bottom = -17
										margin_right = -14
										scale = 0.6
										allow_outside = yes

										button_round = {
											enabled = "[Character.IsPlayerInteractionValid('vassal_modify_vassal_contract_interaction')]"
											onclick = "[Character.OpenPlayerInteraction('vassal_modify_vassal_contract_interaction')]"
											tooltip = "[Character.GetPlayerInteractionTooltip('vassal_modify_vassal_contract_interaction')]"

											button_feudal_contract = {
												alwaystransparent = yes
												parentanchor = center
											}
										}
									}
								}

								vbox = {
									margin_top = 18
									margin_bottom = 16

									text_single = {
										text = "[tax] [obligations]"
									}

									hbox = {
										margin_top = 10
										spacing = 10

										vbox = {
											button_standard_clean = {
												size = { 90 32 }
												datacontext = "[GetScriptedGui( 'invisible_hand_feudal_contract_tax_level_1' )]"
												down = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												tooltip = "TAX_OBLIGATIONS_LEVEL_EXEMPT_TT"
												
												background = {
													using = Background_Area
													alpha = 0.6
												}

												text_multi = {
													margin_top = -6
													text = "FEUDAL_OBLIGATIONS_LEVEL_EXEMPT"
													size = { 100% 100% }
													align = center
													default_format = "#high"
												}
											}
										}

										vbox = {
											button_standard_clean = {
												size = { 90 32 }
												datacontext = "[GetScriptedGui( 'invisible_hand_feudal_contract_tax_level_2' )]"
												down = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												tooltip = "TAX_OBLIGATIONS_LEVEL_LOW_TT"
												
												background = {
													using = Background_Area
													alpha = 0.6
												}

												text_multi = {
													margin_top = -6
													text = "FEUDAL_OBLIGATIONS_LEVEL_LOW"
													size = { 100% 100% }
													align = center
													default_format = "#high"
												}
											}
										}

										vbox = {
											button_standard_clean = {
												size = { 90 32 }
												datacontext = "[GetScriptedGui( 'invisible_hand_feudal_contract_tax_level_3' )]"
												down = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												tooltip = "TAX_OBLIGATIONS_LEVEL_NORMAL_TT"
												
												background = {
													using = Background_Area
													alpha = 0.6
												}

												text_multi = {
													margin_top = -6
													text = "FEUDAL_OBLIGATIONS_LEVEL_NORMAL"
													size = { 100% 100% }
													align = center
													default_format = "#high"
												}
											}
										}

										vbox = {
											button_standard_clean = {
												size = { 90 32 }
												datacontext = "[GetScriptedGui( 'invisible_hand_feudal_contract_tax_level_4' )]"
												down = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												tooltip = "TAX_OBLIGATIONS_LEVEL_HIGH_TT"
												
												background = {
													using = Background_Area
													alpha = 0.6
												}

												text_multi = {
													margin_top = -6
													text = "FEUDAL_OBLIGATIONS_LEVEL_HIGH"
													size = { 100% 100% }
													align = center
													default_format = "#high"
												}
											}
										}

										vbox = {
											button_standard_clean = {
												size = { 90 32 }
												datacontext = "[GetScriptedGui( 'invisible_hand_feudal_contract_tax_level_5' )]"
												down = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												tooltip = "TAX_OBLIGATIONS_LEVEL_EXTORTIONATE_TT"
												
												background = {
													using = Background_Area
													alpha = 0.6
												}

												text_multi = {
													margin_top = -6
													margin_left = 6
													margin_right = 6
													text = "FEUDAL_OBLIGATIONS_LEVEL_EXTORTIONATE"
													size = { 100% 100% }
													align = center
													default_format = "#high"
												}
											}
										}
									}

									text_single = {
										margin_top = 2
										datacontext = "[MyRealmWindow.GetIncomeTax]"
										text = "TAX_OBLIGATIONS_AMOUNT"

										tooltipwidget = {
											widget_gold_breakdown_tooltip_alt_4 = { }
										}
									}
								}

								vbox = {
									margin_top = 8
									margin_bottom = 16

									text_single = {
										text = "[levy] [obligations]"
									}

									hbox = {
										margin_top = 10
										spacing = 10

										vbox = {
											button_standard_clean = {
												size = { 90 32 }
												datacontext = "[GetScriptedGui( 'invisible_hand_feudal_contract_levy_level_1' )]"
												down = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												tooltip = "LEVY_OBLIGATIONS_LEVEL_NONE_TT"
												
												background = {
													using = Background_Area
													alpha = 0.6
												}

												text_multi = {
													margin_top = -6
													text = "FEUDAL_OBLIGATIONS_LEVEL_NONE"
													size = { 100% 100% }
													align = center
													default_format = "#high"
												}
											}
										}

										vbox = {
											button_standard_clean = {
												size = { 90 32 }
												datacontext = "[GetScriptedGui( 'invisible_hand_feudal_contract_levy_level_2' )]"
												down = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												tooltip = "LEVY_OBLIGATIONS_LEVEL_LOW_TT"
												
												background = {
													using = Background_Area
													alpha = 0.6
												}

												text_multi = {
													margin_top = -6
													text = "FEUDAL_OBLIGATIONS_LEVEL_LOW"
													size = { 100% 100% }
													align = center
													default_format = "#high"
												}
											}
										}

										vbox = {
											button_standard_clean = {
												size = { 90 32 }
												datacontext = "[GetScriptedGui( 'invisible_hand_feudal_contract_levy_level_3' )]"
												down = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												tooltip = "LEVY_OBLIGATIONS_LEVEL_NORMAL_TT"
												
												background = {
													using = Background_Area
													alpha = 0.6
												}

												text_multi = {
													margin_top = -6
													text = "FEUDAL_OBLIGATIONS_LEVEL_NORMAL"
													size = { 100% 100% }
													align = center
													default_format = "#high"
												}
											}
										}

										vbox = {
											button_standard_clean = {
												size = { 90 32 }
												datacontext = "[GetScriptedGui( 'invisible_hand_feudal_contract_levy_level_4' )]"
												down = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												tooltip = "LEVY_OBLIGATIONS_LEVEL_HIGH_TT"
												
												background = {
													using = Background_Area
													alpha = 0.6
												}

												text_multi = {
													margin_top = -6
													text = "FEUDAL_OBLIGATIONS_LEVEL_HIGH"
													size = { 100% 100% }
													align = center
													default_format = "#high"
												}
											}
										}

										vbox = {
											button_standard_clean = {
												size = { 90 32 }
												datacontext = "[GetScriptedGui( 'invisible_hand_feudal_contract_levy_level_5' )]"
												down = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												tooltip = "LEVY_OBLIGATIONS_LEVEL_MASSIVE_TT"
												
												background = {
													using = Background_Area
													alpha = 0.6
												}

												text_multi = {
													margin_top = -6
													margin_left = 6
													margin_right = 6
													text = "FEUDAL_OBLIGATIONS_LEVEL_MASSIVE"
													size = { 100% 100% }
													align = center
													default_format = "#high"
												}
											}
										}
									}

									text_single = {
										margin_top = 2
										datacontext = "[MyRealmWindow.GetLevyTax]"
										text = "LEVY_OBLIGATIONS_AMOUNT"

										tooltipwidget = {
											widget_gold_breakdown_tooltip_alt_3 = { }
										}
									}
								}

								vbox = {
									margin_top = 6
									margin_bottom = 6
									allow_outside = yes
									layoutpolicy_horizontal = expanding
									spacing = 12

									text_single = {
										text = "MY_REALM_WINDOW_SPECIAL_RIGHTS"
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										allow_outside = yes
										margin_top = -14
									
										vbox = {
											minimumsize = { 142 50 }

											background = {
												using = Background_Area_With_Header
												alpha = 0.75
											}
													
											text_single = {
												text = "MY_REALM_WINDOW_SPECIAL_CONTRACT"
												using = Font_Size_Small
												default_format = "#high"
												margin_top = -5
											}

											text_single = {
												datacontext = "[GetScriptedGui('invisible_hand_no_special_contract')]"
												visible = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												text = "MY_REALM_WINDOW_NO_SPECIAL_CONTRACT"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}

											text_single = {
												datacontext = "[GetScriptedGui('invisible_hand_palatinate_special_contract')]"
												visible = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												text = "MY_REALM_WINDOW_PALATINATE_SPECIAL_CONTRACT"
												tooltip = "SPECIAL_CONTRACT_PALATINATE_TT"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}

											text_single = {
												datacontext = "[GetScriptedGui('invisible_hand_march_special_contract')]"
												visible = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												text = "MY_REALM_WINDOW_MARCH_SPECIAL_CONTRACT"
												tooltip = "SPECIAL_CONTRACT_MARCH_TT"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}

											text_single = {
												datacontext = "[GetScriptedGui('invisible_hand_scutage_special_contract')]"
												visible = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												text = "MY_REALM_WINDOW_SCUTAGE_SPECIAL_CONTRACT"
												tooltip = "SPECIAL_CONTRACT_SCUTAGE_TT"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}
										}

										vbox = {
											minimumsize = { 142 50 }
											datacontext = "[GetScriptedGui('invisible_hand_war_declaration_rights')]"

											background = {
												using = Background_Area_With_Header
												alpha = 0.75
											}
										
											text_single = {
												text = "MY_REALM_WINDOW_WAR_DECLARATION_RIGHTS"
												using = Font_Size_Small
												default_format = "#high"
												margin_top = -5
											}

											text_single = {
												visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End))]"
												text = "MY_REALM_WINDOW_WAR_DECLARATION_RIGHTS_NO"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}

											text_single = {
												visible = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												text = "MY_REALM_WINDOW_WAR_DECLARATION_RIGHTS_YES"
												tooltip = "MY_REALM_WINDOW_WAR_DECLARATION_RIGHTS_TT"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}
										}

										vbox = {
											minimumsize = { 142 50 }
											datacontext = "[GetScriptedGui('invisible_hand_fortification_rights')]"

											background = {
												using = Background_Area_With_Header
												alpha = 0.75
											}
										
											text_single = {
												text = "MY_REALM_WINDOW_FORTIFICATION_RIGHTS"
												using = Font_Size_Small
												default_format = "#high"
												margin_top = -5
											}

											text_single = {
												visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End))]"
												text = "MY_REALM_WINDOW_FORTIFICATION_RIGHTS_NO"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}

											text_single = {
												visible = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												text = "MY_REALM_WINDOW_FORTIFICATION_RIGHTS_YES"
												tooltip = "MY_REALM_WINDOW_FORTIFICATION_RIGHTS_TT"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}
										}
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										allow_outside = yes

										vbox = {
											minimumsize = { 142 50 }
											datacontext = "[GetScriptedGui('invisible_hand_religious_rights')]"

											background = {
												using = Background_Area_With_Header
												alpha = 0.75
											}
										
											text_single = {
												text = "MY_REALM_WINDOW_RELIGIOUS_RIGHTS"
												using = Font_Size_Small
												default_format = "#high"
												margin_top = -5
											}

											text_single = {
												visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End))]"
												text = "MY_REALM_WINDOW_RELIGIOUS_RIGHTS_NO"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}

											text_single = {
												visible = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												text = "MY_REALM_WINDOW_RELIGIOUS_RIGHTS_YES"
												tooltip = "MY_REALM_WINDOW_RELIGIOUS_RIGHTS_TT"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}
										}

										vbox = {
											minimumsize = { 142 50 }
											datacontext = "[GetScriptedGui('invisible_hand_succession_rights')]"

											background = {
												using = Background_Area_With_Header
												alpha = 0.75
											}
										
											text_single = {
												text = "MY_REALM_WINDOW_SUCCESSION_RIGHTS"
												using = Font_Size_Small
												default_format = "#high"
												margin_top = -5
											}

											text_single = {
												visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End))]"
												text = "MY_REALM_WINDOW_SUCCESSION_RIGHTS_NO"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}

											text_single = {
												visible = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												text = "MY_REALM_WINDOW_SUCCESSION_RIGHTS_YES"
												tooltip = "MY_REALM_WINDOW_SUCCESSION_RIGHTS_TT"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}
										}

										vbox = {
											minimumsize = { 142 50 }
											datacontext = "[GetScriptedGui('invisible_hand_council_rights')]"

											background = {
												using = Background_Area_With_Header
												alpha = 0.75
											}
										
											text_single = {
												text = "MY_REALM_WINDOW_COUNCIL_RIGHTS"
												using = Font_Size_Small
												default_format = "#high"
												margin_top = -5
											}

											text_single = {
												visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End))]"
												text = "MY_REALM_WINDOW_COUNCIL_RIGHTS_NO"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}

											text_single = {
												visible = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												text = "MY_REALM_WINDOW_COUNCIL_RIGHTS_YES"
												tooltip = "MY_REALM_WINDOW_COUNCIL_RIGHTS_TT"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}
										}
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										allow_outside = yes
										margin_bottom = 20

										vbox = {
											minimumsize = { 142 50 }
											datacontext = "[GetScriptedGui('invisible_hand_title_revocation_rights')]"

											background = {
												using = Background_Area_With_Header
												alpha = 0.75
											}
										
											text_single = {
												text = "MY_REALM_WINDOW_TITLE_REVOCATION_RIGHTS"
												using = Font_Size_Small
												default_format = "#high"
												margin_top = -5
											}

											text_single = {
												visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End))]"
												text = "MY_REALM_WINDOW_TITLE_REVOCATION_RIGHTS_NO"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}

											text_single = {
												visible = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												text = "MY_REALM_WINDOW_TITLE_REVOCATION_RIGHTS_YES"
												tooltip = "MY_REALM_WINDOW_TITLE_REVOCATION_RIGHTS_TT"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}
										}

										vbox = {
											minimumsize = { 142 50 }
											datacontext = "[GetScriptedGui('invisible_hand_coinage_rights')]"

											background = {
												using = Background_Area_With_Header
												alpha = 0.75
											}
										
											text_single = {
												text = "MY_REALM_WINDOW_COINAGE_RIGHTS"
												using = Font_Size_Small
												default_format = "#high"
												margin_top = -5
											}

											text_single = {
												visible = "[Not(ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End))]"
												text = "MY_REALM_WINDOW_COINAGE_RIGHTS_NO"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}

											text_single = {
												visible = "[ScriptedGui.IsValid( GuiScope.SetRoot( GetPlayer.MakeScope ).End)]"
												text = "MY_REALM_WINDOW_COINAGE_RIGHTS_YES"
												tooltip = "MY_REALM_WINDOW_COINAGE_RIGHTS_TT"
												using = Font_Size_Small
												default_format = "#medium"
												margin_top = -10
											}
										}

										spacer = {
											size = { 140 44 }
										}
									}
								}
							}

							expand = { }
						}
					}
				}

				### LAWS TAB
				vbox = {
					visible = "[GetVariableSystem.Exists( 'laws_tab' )]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						minimumsize = { 0 640 }

						blockoverride "scrollbox_content" {
							margin_left = 20
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding


							vbox = {
								margin = { 30 0 }
								margin_top = 15
								layoutpolicy_horizontal = expanding

								text_label_center = {
									text = "[invisible_hand_centralization]"
								}

								spacer = {
									size = { 0 30 }
								}

								widget = {
							
									button_standard_clean = {
										size = { 450 3 }
										down = "[ObjectsEqual( GetPlayer, GetPlayer )]"
									}
								}
							
								hbox = {
									datamodel = "[MyRealmWindow.GetRealmLaws]"
									allow_outside = yes

									item = {
										hbox = {
											datamodel = "[GuiLawGroup.GetLaws]"
											visible = "[GuiLawGroup.GetLawGroup.HasFlag( 'invisible_hand_centralization_law' )]"
											spacing = 40
											allow_outside = yes
											margin_top = -10

											item = {
												vbox = {
													datacontext = "[GuiLaw.GetLaw]"
													allow_outside = yes

													button_round = {
														size = { 24 24 }
														enabled = "[Or(GuiLaw.CanEnact,GuiLaw.IsEnacted)]"
														down = "[GuiLaw.IsEnacted]"
														onclick = "[GuiLaw.Enact]"
														tooltipwidget = { pass_law_tooltip_alt_2 = {} }
														using = tooltip_below
													}

													text_single = {
														text = "[GuiLaw.GetLaw.GetSubName]"
													}
												}
											}
										}
									}
								}

								spacer = {
									size = { 0 20 }
								}
							}
							
							# Crown Laws
							vbox = {
								margin = { 30 0 }
								margin_top = 15
								layoutpolicy_horizontal = expanding

								text_label_center = {
									text = "[invisible_hand_crown_laws]"
								}

								vbox = {
									datamodel = "[MyRealmWindow.GetRealmLaws]"
									spacing = 10
									margin_bottom = 5
									ignoreinvisible = yes
									layoutpolicy_horizontal = expanding

									item = {
										hbox = {
											visible = "[And( GuiLawGroup.GetLawGroup.HasFlag( 'invisible_hand_crown_law' ), GuiLawGroup.IsAvailable )]"
											layoutpolicy_horizontal = growing

											vbox = {
												layoutpolicy_horizontal = growing

												text_single = {
													layoutpolicy_horizontal = growing
													max_width = 350
													text = "[GuiLawGroup.GetLawGroup.GetNameSingular]:"
												}

												text_single = {
													layoutpolicy_horizontal = growing
													max_width = 350
													text = "[GuiLawGroup.GetCurrentLevel.GetLaw.GetName]"
													default_format = "#high"
												}

												text_single = {
													layoutpolicy_horizontal = growing
													max_width = 350
													visible = "[GuiLawGroup.GetCurrentLevel.GetLaw.HasSubName]"
													text = "[GuiLawGroup.GetCurrentLevel.GetLaw.GetSubName]"
													default_format = "#F"
												}
											}
											expand = {
												layoutpolicy_horizontal = growing
											}

											button_standard = {
												datacontext = "[GuiLawGroup]"
												size = { 150 32 }
												onclick = "[OpenSuccessionLawChangeWindow(GuiLawGroup.Self)]"
												onclick = "[GetVariableSystem.Toggle( 'invisible_hand_law' )]"
												text = "MRW_CHANGE_LAW"
												tooltip = "MRW_CHANGE_LAW_TT"
											}
										}
									}
								}
							}

							# Realm Laws
							vbox = {
								margin = { 30 0 }
								margin_top = 15
								layoutpolicy_horizontal = expanding

								text_label_center = {
									text = "[invisible_hand_realm_laws]"
								}

								vbox = {
									datamodel = "[MyRealmWindow.GetRealmLaws]"
									spacing = 10
									margin_bottom = 5
									ignoreinvisible = yes
									layoutpolicy_horizontal = expanding

									item = {
										hbox = {
											visible = "[And( GuiLawGroup.GetLawGroup.HasFlag( 'invisible_hand_realm_law' ), GuiLawGroup.IsAvailable )]"
											layoutpolicy_horizontal = growing

											vbox = {
												layoutpolicy_horizontal = growing

												text_single = {
													layoutpolicy_horizontal = growing
													max_width = 350
													text = "[GuiLawGroup.GetLawGroup.GetNameSingular]:"
												}

												text_single = {
													layoutpolicy_horizontal = growing
													max_width = 350
													text = "[GuiLawGroup.GetCurrentLevel.GetLaw.GetName]"
													default_format = "#high"
												}

												text_single = {
													layoutpolicy_horizontal = growing
													max_width = 350
													visible = "[GuiLawGroup.GetCurrentLevel.GetLaw.HasSubName]"
													text = "[GuiLawGroup.GetCurrentLevel.GetLaw.GetSubName]"
													default_format = "#F"
												}
											}
											expand = {
												layoutpolicy_horizontal = growing
											}

											button_standard = {
												datacontext = "[GuiLawGroup]"
												size = { 150 32 }
												onclick = "[OpenSuccessionLawChangeWindow(GuiLawGroup.Self)]"
												onclick = "[GetVariableSystem.Toggle( 'invisible_hand_law' )]"
												text = "MRW_CHANGE_LAW"
												tooltip = "MRW_CHANGE_LAW_TT"
											}
										}
									}
								}
							}

							expand = { }
						}
					}
				}

				### SUCCESSION TAB
				vbox = {
					visible = "[And(MyRealmWindow.IsShowingSuccession,Not(Or(GetVariableSystem.Exists( 'liege_tab' ),GetVariableSystem.Exists( 'laws_tab' ))))]"
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding

					state = {
						name = _show
						using = Animation_FadeIn_Quick
					}

					state = {
						name = _hide
						alpha = 0
					}

					scrollbox = {
						layoutpolicy_horizontal = expanding
						layoutpolicy_vertical = expanding
						minimumsize = { 0 650 }

						blockoverride "scrollbox_content" {
							margin_left = 20

							# Succession Laws
							vbox = {
								margin = { 30 15 }
								spacing = 8
								layoutpolicy_horizontal = expanding

								text_label_center = {
									text = "[succession_laws]"
								}

								vbox = {
									datamodel = "[MyRealmWindow.GetRealmLaws]"
									spacing = 10
									margin_bottom = 5
									ignoreinvisible = yes
									layoutpolicy_horizontal = expanding

									item = {
										hbox = {
											visible = "[And( Not( Or( GuiLawGroup.GetLawGroup.HasFlag( 'realm_law' ), GuiLawGroup.GetLawGroup.HasFlag( 'invisible_hand_realm_law' ) ) ), GuiLawGroup.IsAvailable )]"
											layoutpolicy_horizontal = growing

											vbox = {
												layoutpolicy_horizontal = growing
												text_single = {
													layoutpolicy_horizontal = growing
													max_width = 350
													text = "[GuiLawGroup.GetLawGroup.GetNameSingular]:"
												}

												text_single = {
													layoutpolicy_horizontal = growing
													max_width = 350
													text = "[GuiLawGroup.GetCurrentLevel.GetLaw.GetName]"
													default_format = "#high"
												}

												text_single = {
													layoutpolicy_horizontal = growing
													max_width = 350
													visible = "[GuiLawGroup.GetCurrentLevel.GetLaw.HasSubName]"
													text = "[GuiLawGroup.GetCurrentLevel.GetLaw.GetSubName]"
													default_format = "#F"
												}
											}
											expand = {
												layoutpolicy_horizontal = growing
											}

											button_standard = {
												datacontext = "[GuiLawGroup]"
												size = { 150 32 }
												onclick = "[OpenSuccessionLawChangeWindow(GuiLawGroup.Self)]"
												onclick = "[GetVariableSystem.Clear( 'invisible_hand_law' )]"
												text = "MRW_CHANGE_LAW"
												tooltip = "MRW_CHANGE_LAW_TT"
											}
										}
									}
								}
							}

							# Succession
							vbox = {
								layoutpolicy_horizontal = expanding
								layoutpolicy_vertical = expanding
								margin = { 30 15 }
								spacing = 8

								background = {
									using = Background_Area_Border
									margin_right = -10
								}

								text_label_center = {
									text = "[succession]"
								}

								hbox = {
									layoutpolicy_horizontal = growing

									vbox = {
										layoutpolicy_horizontal = growing


										text_single = {
											layoutpolicy_horizontal = growing
											max_width = 350
											text = "MRW_DESIGNATED_HEIR_LABEL"
										}

										text_single = {
											visible = "[MyRealmWindow.GetCharacter.GetDesignatedHeir.IsValid]"
											layoutpolicy_horizontal = growing
											text = "MRW_DESIGNATED_HEIR"
											max_width = 350
										}

										text_single = {
											visible = "[Not(MyRealmWindow.GetCharacter.GetDesignatedHeir.IsValid)]"
											layoutpolicy_horizontal = growing
											text = "MRW_NO_DESIGNATED_HEIR"
											max_width = 350
										}
									}

									button_standard = {
										text = "MY_REALM_WINDOW_DESIGNATE_HEIR"
										size = { 150 32 }
										tooltip = "MRW_DESIGNATE_HEIR_TT"
										enabled = "[MyRealmWindow.CanDesignateHeir]"
										onclick = "[OpenDesignateHeirWindow]"
									}
								}

								divider = {
									layoutpolicy_horizontal = expanding
								}

								vbox = {
									layoutpolicy_horizontal = expanding

									text_single = {
										name = "no_heir_warning"
										visible = "[Not( MyRealmWindow.HasHeir )]"
										layoutpolicy_horizontal = expanding
										text = "MY_REALM_WINDOW_NO_HEIR_FLAVOR"
										align = center
										margin_bottom = 8
									}

									text_single = {
										name = "not_primary_heir"
										visible = "[And( MyRealmWindow.HasHeir, Not( ObjectsEqual( MyRealmWindow.GetCharacter.GetPlayerHeir, MyRealmWindow.GetCharacter.GetPrimaryTitle.GetHeir.Self ) ) )]"
										layoutpolicy_horizontal = expanding
										text = "MY_REALM_WINDOW_NOT_PRIMARY_HEIR"
										align = center
										margin_bottom = 8
									}
								}

								hbox = {
									layoutpolicy_horizontal = expanding
									visible = "[MyRealmWindow.HasHeir]"
									datacontext = "[MyRealmWindow.GetCharacter.GetPlayerHeir]"

									background = {
										using = Background_Area_With_Header
										margin_left = 8
									}

									vbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = growing
										margin_bottom = 5

										text_single = {
											name = "heir_name"
											align = left
											text = "[primary_heir|e]: [Character.GetNameNoTooltip]"
											layoutpolicy_horizontal = expanding
											using = Font_Size_Medium
											max_width = 340
											fontsize_min = 14
										}

										spacer = {
											size = { 10 3 }
										}

										text_single = {
											margin_left = 2
											name = "heir_share"
											datacontext = "[GetPlayer]"
											layoutpolicy_horizontal = expanding

											text = "MY_REALM_WINDOW_PARTITION_SHARE"
										}

										overlappingitembox = {
											name = "titles_box"
											datamodel = "[MyRealmWindow.GetMyPartitionShare]"
											minimumsize = { 250 50 }
											maximumsize = { 350 50 }
											margin_top = -6
											margin_left = -4

											item = {
												container = {

													coa_title_tiny_crown = {
														datacontext = "[TitleItem.GetTitle]"
														using = tooltip_ne
													}

													icon = {
														name = "has_laws"
														parentanchor = bottom|right
														visible = [TitleItem.GetTitle.HasLaws]
														size = { 10 10 }
														texture = "gfx/interface/icons/flat_icons/menu.dds"
													}
												}
											}
										}
									}

									portrait_head = { }
								}

								text_single = {
									layoutpolicy_horizontal = expanding
									align = center

									text = "MY_REALM_WINDOW_HEIR_NOT_MY_DYNASTY"
									visible = "[Not(ObjectsEqual(Character.GetHouse.GetDynasty.Self, GetPlayer.GetHouse.GetDynasty.Self))]"
									using = Font_Size_Small
									margin_bottom = 10
								}

								divider = {
									layoutpolicy_horizontal = expanding
								}

								vbox = {
									name = "line_of_succession"
									#visible = "[MyRealmWindow.HasSingleHeir]"
									layoutpolicy_horizontal = expanding
									spacing = 10

									hbox = {
										layoutpolicy_horizontal = expanding
										margin_bottom = 4
										margin_top = 4

										text_label_center = {
											name = "line_of_succession_label"
											text = "MY_REALM_WINDOW_LINE_OF_SUCCESSION"
										}
									}

									hbox = {
										name = "line_of_succession_box"
										allow_outside = yes
										layoutpolicy_horizontal = expanding
										spacing = 0
										margin_right = 10

										datamodel = "[MyRealmWindow.GetLineOfSuccession]"

										item = {
											portrait_head_small = {
												name = "heir_portrait"
											}
										}
									}
								}

								##### FROM REALM'S PARTITION #####
								vbox = {
									layoutpolicy_horizontal = expanding

									spacer = {
										size = { 5 5 }
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										visible = "[DataModelHasItems(MyRealmWindow.GetTitleSuccession)]"
										margin_bottom = 10

										expand = {}

										button_group = {
											onclick = "[GetVariableSystem.Toggle( 'expand_partition' )]"

											flowcontainer = {
												ignoreinvisible = yes
												spacing = 5

												widget = {
													size = { 18 22 }

													button_expand = {
														parentanchor = center
														down = "[GetVariableSystem.Exists( 'expand_partition' )]"
													}
												}

												flowcontainer = {
													margin_top = -1

													text_single = {
														text = "MY_REALM_WINDOW_TITLES_LOST_ON_SUCCESSION"
														align = nobaseline
													}
												}
											}
										}

										expand = {}
									}

									spacer = {
										visible = "[GetVariableSystem.Exists( 'expand_partition' )]"
										size = { 5 5 }
									}

									vbox = {
										name = "title_succession"
										datamodel = "[MyRealmWindow.GetTitleSuccession]"
										visible = "[GetVariableSystem.Exists( 'expand_partition' )]"
										layoutpolicy_horizontal = expanding
										spacing = 10

										item = {
											vbox = {
												layoutpolicy_horizontal = expanding
												datacontext = "[TitleSuccessionItem.GetHeir]"
												hbox = {
													layoutpolicy_horizontal = expanding

													background = {
														using = Background_Area_With_Header
														margin_left = 8
													}

													vbox = {
														layoutpolicy_horizontal = expanding
														layoutpolicy_vertical = growing
														margin_bottom = 5
														margin_right = -10
														margin_left = -10

														hbox = {
															layoutpolicy_horizontal = expanding
															margin_left = 12

															text_single = {
																name = "heir_name"
																align = left
																text = "[heir|e]: [Character.GetNameNoTooltip]"
																using = Font_Size_Medium
																max_width = 340
																fontsize_min = 14
															}

															expand = { }
														}

														spacer = {
															size = { 10 3 }
														}

														hbox = {
															layoutpolicy_horizontal = expanding
															margin_left = 12

															text_single = {
																name = "heir_share"
																datacontext = "[GetPlayer]"
																visible = "[DataModelHasItems(TitleSuccessionItem.GetPartitionTitles)]"
																layoutpolicy_horizontal = expanding

																text = "MY_REALM_WINDOW_PARTITION_SHARE"
															}

															expand = { }
														}

														hbox = {
															layoutpolicy_horizontal = expanding
															margin_left = 12

															overlappingitembox = {
																name = "titles_box"
																datamodel = "[TitleSuccessionItem.GetPartitionTitles]"
																visible = "[DataModelHasItems(TitleSuccessionItem.GetPartitionTitles)]"
																minimumsize = { 250 50 }
																maximumsize = { 350 50 }
																margin_top = -6
																margin_left = -5

																item = {
																	container = {

																		coa_title_tiny_crown = {
																			datacontext = "[TitleItem.GetTitle]"
																			using = tooltip_ne
																		}

																		icon = {
																			name = "has_laws"
																			parentanchor = bottom|right
																			visible = [TitleItem.GetTitle.HasLaws]
																			size = { 10 10 }
																			texture = "gfx/interface/icons/flat_icons/menu.dds"
																		}
																	}
																}
															}

															expand = { }
														}

														text_single = {
															name = "exception_label"
															visible = "[DataModelHasItems(TitleSuccessionItem.GetExceptionTitles)]"
															layoutpolicy_horizontal = expanding

															text = "MY_REALM_WINDOW_EXCEPTIONS"
														}

														overlappingitembox = {
															name = "exception_box"
															datamodel = "[TitleSuccessionItem.GetExceptionTitles]"
															visible = "[DataModelHasItems(TitleSuccessionItem.GetExceptionTitles)]"
															minimumsize = { 350 50 }
															spacing = 4

															item = {
																container = {

																	coa_title_tiny_crown = {
																		datacontext = "[TitleItem.GetTitle]"
																		using = tooltip_ne

																		icon = {
																			name = "has_laws"
																			visible = "[TitleItem.GetTitle.HasLaws]"
																			parentanchor = bottom|right
																			size = { 25 25 }
																			position = { 5 0 }
																			texture = "gfx/interface/icons/title_status/icon_title_law.dds"
																		}
																	}
																}
															}
														}
													}

													portrait_head = { }
												}

												text_single = {
													layoutpolicy_horizontal = expanding
													align = center

													text = "MY_REALM_WINDOW_HEIR_NOT_MY_DYNASTY"
													visible = "[Not(ObjectsEqual(Character.GetHouse.GetDynasty.Self, GetPlayer.GetHouse.GetDynasty.Self))]"
													using = Font_Size_Small
													margin_top = 10
													margin_bottom = 10
												}

												hbox = {
													margin_top = 10
													layoutpolicy_horizontal = expanding

													divider = {
														layoutpolicy_horizontal = expanding
													}
												}
											}
										}
									}
								}

								vbox = {
									margin_top = -10
									name = "exceptions"
									layoutpolicy_horizontal = expanding
									layoutpolicy_vertical = growing

									visible = "[DataModelHasItems(MyRealmWindow.GetSuccessionExceptions)]"

									hbox = {
										layoutpolicy_horizontal = expanding

										text_label_center = {
											text = "MY_REALM_WINDOW_EXCEPTIONS"
										}
									}

									hbox = {
										name = "exceptions_box"
										layoutpolicy_horizontal = expanding
										spacing = 10
										margin_top = 4

										datamodel = "[MyRealmWindow.GetSuccessionExceptions]"

										item = {
											container = {
												coa_title_tiny_crown = {
													datacontext = "[TitleItem.GetTitle]"
													using = tooltip_ne
												}
											}
										}
									}
								}

								divider = {
									layoutpolicy_horizontal = expanding
									visible = "[MyRealmWindow.CanVote]"
								}

								#### ELECTIONS ####
								vbox = {
									layoutpolicy_horizontal = expanding
									visible = "[MyRealmWindow.CanVote]"

									hbox = {
										layoutpolicy_horizontal = expanding

										text_label_center = {
											text = "MY_REALM_WINDOW_ELECTIONS"
										}
									}

									hbox = {
										layoutpolicy_horizontal = expanding
										margin_left = -20

										fixedgridbox = {
											name = "exceptions_box"
											addcolumn = 480
											addrow = 90
											datamodel = "[MyRealmWindow.GetTitlesCanVote]"

											item = {
												widget = {
													name = "election_title"
													size = { 480 90 }
													datacontext = "[TitleItem.GetTitle]"

													hbox = {
														layoutpolicy_vertical = expanding
														spacing = 10

														expand = {}

														coa_title_small_crown = {
															datacontext = "[Title]"
															using = tooltip_ne
														}

														vbox = {
															spacing = 7

															text_single = {
																layoutpolicy_horizontal = expanding
																text = "[Title.GetNameNoTooltip]"
															}

															hbox = {
																layoutpolicy_horizontal = expanding

																button_standard_select_arrow = {
																	name = "go_to_vote"
																	onclick = "[OpenSuccessionElectionWindowForTitle(Title.Self)]"
																	
																	blockoverride "button_text"{
																		text = "MY_REALM_WINDOW_VOTE"
																	}
																	
																	tooltip = "MY_REALM_WINDOW_VOTE_TOOLTIP"
																}
															}
														}

														expand = {}
													}
												}
											}
										}
									}
								}
								expand = { }
							}
						}
					}
				}

				### Bottom Info
				vbox = {
					visible = "[Or(Or(Or( MyRealmWindow.IsShowingDomain, MyRealmWindow.IsShowingVassals),GetVariableSystem.Exists('liege_tab')),GetVariableSystem.Exists('laws_tab'))]"
					layoutpolicy_horizontal = expanding
					margin = { 15 5 }
					margin_bottom = 15
					spacing = 8

					vbox = {
						visible = "[GetVariableSystem.Exists('laws_tab')]"
						layoutpolicy_horizontal = expanding
						margin_bottom = 3

						hbox = {
							spacing = 16

							text_single = {
								default_format = "#high"
								text = "MY_REALM_WINDOW_VASSAL_OPINION"
								tooltip = "MY_REALM_WINDOW_VASSAL_OPINION_TT"
							}

							hbox = {
								tooltip = "[GetPlayer.GetDomainLimitTooltip]"
								spacing = 2

								icon = {
									size = { 35 35 }
									texture = "gfx/interface/icons/icon_domain.dds"
								}

								text_single = {
									margin_right = 2
									text = "[domain_limit|e]:"
								}

								text_single = {
									text = "[SelectLocalization(MyRealmWindow.IsOverDomainLimit, 'MY_REALM_WINDOW_DOMAIN_LIMIT_VALUE_WARNING_ALT', 'MY_REALM_WINDOW_DOMAIN_LIMIT_VALUE_ALT')]"
								}
							}

							hbox = {
								spacing = 2
								tooltip = "[Character.GetVassalLimitTooltip]"
								name = "tutorial_highlight_vassal_limit"

								icon = {
									size = { 30 30 }
									texture = "gfx/interface/icons/icon_vassal.dds"
								}

								text_single = {
									margin_right = 2
									text = "[vassal_limit|e]:"
								}

								text_single = {
									visible = "[Not(GreaterThan_int32( Character.GetNumVassalsTowardsLimit, Character.GetVassalLimit ))]"
									text = "MY_REALM_WINDOW_VASSAL_LIMIT_VALUE"
								}

								text_single = {
									visible = "[GreaterThan_int32( Character.GetNumVassalsTowardsLimit, Character.GetVassalLimit )]"
									text = "MY_REALM_WINDOW_VASSAL_LIMIT_VALUE_WARNING"
								}
							}
						}
					}

					vbox = {
						visible = "[And(MyRealmWindow.IsShowingVassals,Not(Or(GetVariableSystem.Exists('liege_tab'),GetVariableSystem.Exists('laws_tab'))))]"
						layoutpolicy_horizontal = expanding
						margin_top = 2
						margin_bottom = 6

						hbox = {
							spacing = 16

							text_single = {
								default_format = "#high"
								text = "MY_REALM_WINDOW_VASSAL_OPINION"
								tooltip = "MY_REALM_WINDOW_VASSAL_OPINION_TT"
							}

							hbox = {

								tooltip = "[GetPlayer.GetDreadBreakdown]"

								icon = {
									name = "dread_icon"
									size = { 30 30 }
									texture = "gfx/interface/icons/icon_dread.dds"
								}

								text_single = {
									name = "dread_name"
									text = "[dread|E]: [GetPlayer.GetDread|0]"
									default_format = "#high"
								}
							}

							hbox = {
								spacing = 2
								tooltip = "[Character.GetVassalLimitTooltip]"
								name = "tutorial_highlight_vassal_limit"

								icon = {
									size = { 30 30 }
									texture = "gfx/interface/icons/icon_vassal.dds"
								}

								text_single = {
									margin_right = 2
									text = "[vassal_limit|e]:"
								}

								text_single = {
									visible = "[Not(GreaterThan_int32( Character.GetNumVassalsTowardsLimit, Character.GetVassalLimit ))]"
									text = "MY_REALM_WINDOW_VASSAL_LIMIT_VALUE"
								}

								text_single = {
									visible = "[GreaterThan_int32( Character.GetNumVassalsTowardsLimit, Character.GetVassalLimit )]"
									text = "MY_REALM_WINDOW_VASSAL_LIMIT_VALUE_WARNING"
								}
							}
						}
					}

					vbox = {
						visible = "[GetVariableSystem.Exists('liege_tab')]"
						layoutpolicy_horizontal = expanding
						margin_bottom = 4

						hbox = {
							spacing = 16

							hbox = {
								margin_bottom = 2

								tooltip = "[GetPlayer.GetLiege.GetDreadBreakdown]"

								icon = {
									name = "dread_icon"
									size = { 30 30 }
									texture = "gfx/interface/icons/icon_dread.dds"
								}

								text_single = {
									name = "dread_name"
									text = "[dread|E]: [GetPlayer.GetLiege.GetDread|0]"
									default_format = "#high"
								}
							}

							hbox = {
								spacing = 2
								tooltip = "[GetPlayer.GetLiege.GetDomainLimitTooltip]"

								icon = {
									size = { 35 35 }
									texture = "gfx/interface/icons/icon_domain.dds"
								}

								text_single = {
									margin_right = 2
									text = "[domain_limit|e]:"
								}

								text_single = {
									visible = "[GreaterThan_int32( GetPlayer.GetLiege.GetDomainSize, GetPlayer.GetLiege.GetDomainLimit )]"
									text = "MY_REALM_WINDOW_LIEGE_DOMAIN_LIMIT_VALUE_WARNING_ALT"
								}

								text_single = {
									visible = "[Not(GreaterThan_int32( GetPlayer.GetLiege.GetDomainSize, GetPlayer.GetLiege.GetDomainLimit ))]"
									text = "MY_REALM_WINDOW_LIEGE_DOMAIN_LIMIT_VALUE_ALT"
								}
							}

							hbox = {
								spacing = 2
								tooltip = "[GetPlayer.GetLiege.GetVassalLimitTooltip]"

								icon = {
									size = { 30 30 }
									texture = "gfx/interface/icons/icon_vassal.dds"
								}

								text_single = {
									margin_right = 2
									text = "[vassal_limit|e]:"
								}

								text_single = {
									visible = "[Not(GreaterThan_int32( GetPlayer.GetLiege.GetNumVassalsTowardsLimit, GetPlayer.GetLiege.GetVassalLimit ))]"
									text = "MY_REALM_WINDOW_LIEGE_VASSAL_LIMIT_VALUE"
								}

								text_single = {
									visible = "[GreaterThan_int32( GetPlayer.GetLiege.GetNumVassalsTowardsLimit, GetPlayer.GetLiege.GetVassalLimit )]"
									text = "MY_REALM_WINDOW_LIEGE_VASSAL_LIMIT_VALUE_WARNING"
								}
							}
						}
					}

					vbox = {
						visible = "[And(MyRealmWindow.IsShowingDomain,Not(Or(GetVariableSystem.Exists('liege_tab'),GetVariableSystem.Exists('laws_tab'))))]"
						layoutpolicy_horizontal = expanding
						margin_bottom = 3

						hbox = {
							tooltip = "[GetPlayer.GetDomainLimitTooltip]"
							spacing = 2

							icon = {
								size = { 35 35 }
								texture = "gfx/interface/icons/icon_domain.dds"
							}

							text_single = {
								margin_right = 2
								text = "[domain_limit|e]:"
							}

							text_single = {
								text = "[SelectLocalization(MyRealmWindow.IsOverDomainLimit, 'MY_REALM_WINDOW_DOMAIN_LIMIT_VALUE_WARNING_ALT', 'MY_REALM_WINDOW_DOMAIN_LIMIT_VALUE_ALT')]"
							}
						}
					}

					vbox = {
						layoutpolicy_horizontal = expanding
						margin = { 80 0 }

						background = {
							using = Background_Area
							margin = { -65 0 }
							margin_bottom = 10
							margin_top = 3
						}

						hbox = {
							margin_bottom = 5
							layoutpolicy_horizontal = expanding

							expand = {
								minimumsize = { 150 0 }
							}

							text_single = {
								text = "MY_REALM_WINDOW_TAXES"
								min_width = 100
								max_width = 100
								align = right
							}

							text_single = {
								text = "MY_REALM_WINDOW_LEVIES"
								minimumsize = { 100 0 }
								maximumsize = { 100 40 }
								align = right
							}
						}

						divider_light = {
							layoutpolicy_horizontal = expanding
						}

						hbox = {
							name = "domain_income_row"
							layoutpolicy_horizontal = expanding

							background = {
								visible = "[And(MyRealmWindow.IsShowingDomain,Not(GetVariableSystem.Exists('liege_tab')))]"
								using = Status_Highlight
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "MY_REALM_WINDOW_FROM_HOLDINGS"
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetDomainIncome]"
								text = "[ValueBreakdown.GetFixedPointValue|V]"
								min_width = 100
								max_width = 100
								align = right

								tooltipwidget = {
									widget_gold_breakdown_tooltip_alt = { }
								}
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetDomainLevy]"
								text = "[ValueBreakdown.GetValue]"
								minimumsize = { 100 0 }
								align = right
								tooltipwidget = {
									widget_gold_breakdown_tooltip = {
										blockoverride "income" {
											visible = no
										}
									}
								}
							}
						}

						hbox = {
							name = "vassals_income_row"
							visible = "[GreaterThan_int32( MyRealmWindow.GetVassalCount, '(int32)0' )]"
							layoutpolicy_horizontal = expanding

							background = {
								visible = "[And(MyRealmWindow.IsShowingVassals,Not(GetVariableSystem.Exists('liege_tab')))]"
								using = Status_Highlight
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "MY_REALM_WINDOW_FROM_VASSALS"
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetVassalsIncome]"
								text = "[ValueBreakdown.GetFixedPointValue|V]"
								min_width = 100
								max_width = 100
								align = right

								tooltipwidget = {
									widget_gold_breakdown_tooltip_alt_2 = { }
								}
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetVassalsLevy]"
								text = "[ValueBreakdown.GetValue]"
								min_width = 100
								max_width = 100
								align = right

								tooltipwidget = {
									widget_gold_breakdown_tooltip = {
										blockoverride "income"
										{
											visible = no
										}
									}
								}
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding
							visible = "[GetPlayer.HasLiege]"

							background = {
								visible = "[GetVariableSystem.Exists('liege_tab')]"
								using = Status_Highlight
							}

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "MY_REALM_WINDOW_FROM_TO_LIEGE"
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetIncomeTax]"
								text = "[MyRealmWindow.GetCachedTaxToLiege|+V2]"
								min_width = 100
								max_width = 100
								align = right

								tooltipwidget = {
									widget_gold_breakdown_tooltip_alt_4 = { }
								}
							}

							text_single = {
								datacontext = "[MyRealmWindow.GetLevyTax]"
								text = "[ValueBreakdown.GetFixedPointValue|+0V]"
								min_width = 100
								max_width = 100
								align = right

								tooltipwidget = {
									widget_gold_breakdown_tooltip_alt_3 = { }
								}
							}
						}

						hbox = {
							layoutpolicy_horizontal = expanding

							text_single = {
								layoutpolicy_horizontal = expanding
								text = "MY_REALM_WINDOW_TOTAL"
							}

							text_single = {
								text = "[GetPlayerBalance|2V]"
								min_width = 100
								max_width = 100
								align = right
							}

							text_single = {
								datacontext = "[GetPlayer]"
								datacontext = "[GetPlayerArmyComposition]"
								text = "[ArmyComposition.GetLeviesCountString]"
								min_width = 100
								max_width = 100
								align = right
							}
						}
					}
				}
			}
		}
	}
}

######################################################
################ TYPES AND TEMPLATES #################
######################################################

types MyRealmWindow
{
	type my_realm_window_contribution_tooltip = container {
		alwaystransparent = no
		widget = {
			name = "background"
			using = Background_Tooltip
			size = { 100% 100% }
			alwaystransparent = no
		}

		flowcontainer = {
			margin = { 10 0 }
			margin_top = 10
			spacing = 15
			direction = vertical
			ignoreinvisible = yes

			text_single = {
				margin = { 5 0 }
				block "contribution_tooltip_header" {}
			}

			widget_gold_breakdown_tooltip = {
				layoutpolicy_horizontal = expanding
				blockoverride "income"
				{
					visible = no
				}

				blockoverride "background" {}
			}

			block "contribution_tooltip_content_suffix" {
				text_single = {
					multiline = yes
					maximumsize = { 250 -1 }
					text = "MY_REALM_WINDOW_CONTRIBUTION_TO_THEOCRATIC_LIEGE"
					visible = "[Character.IsTheocraticLessee]"
				}
			}

			flowcontainer = {
				spacing = 15
				direction = vertical
				ignoreinvisible = yes
				block "tax_info_visible" {}
				block "tax_info" {}
			}

			flowcontainer = {
				spacing = 15
				direction = vertical
				ignoreinvisible = yes
				block "levy_info_visible" {}
				block "levy_info" {}
			}
		}
	}

	type vassal_contract_not_default_icon = icon
	{
		texture = "gfx/interface/icons/icon_contract_modification.dds"
		framesize = { 60 60 }
		frame = 1
		name = "vassal_contract_not_default"
		size = { 25 25 }
		visible = "[Not( VassalContract.IsContractDefault )]"
		tooltip = "VASSAL_CONTRACT_NOT_DEFAULT"
	}
}